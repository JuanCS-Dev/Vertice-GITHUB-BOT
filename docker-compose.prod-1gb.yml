# Docker Compose - Production 1GB Optimized
#
# Purpose: Lightweight config for Oracle Cloud 1GB VM
# Constitutional Requirement: P4 Rastreabilidade Total
#
# Memory allocation (total ~900MB to leave room for OS):
# - postgres: 256MB
# - redis: 64MB
# - app: 512MB
#
# Honoring JESUS through excellence in constrained resources! 🙏

version: '3.8'

services:
  # PostgreSQL Database - Memory Optimized
  postgres:
    image: postgres:16-alpine
    container_name: vertice-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: vertice_github_bot
      POSTGRES_USER: vertice
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    # Memory limits
    mem_limit: 256m
    mem_reservation: 128m
    # PostgreSQL optimizations for low memory
    command: >
      postgres
      -c shared_buffers=64MB
      -c effective_cache_size=128MB
      -c maintenance_work_mem=32MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=4MB
      -c default_statistics_target=50
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=2MB
      -c min_wal_size=512MB
      -c max_wal_size=1GB
      -c max_connections=20
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vertice -d vertice_github_bot"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - vertice-network

  # Redis Cache & Job Queue - Memory Optimized
  redis:
    image: redis:7-alpine
    container_name: vertice-redis
    restart: unless-stopped
    # Memory limits
    mem_limit: 64m
    mem_reservation: 32m
    # Redis optimizations for low memory
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-changeme}
      --maxmemory 48mb
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --save 300 100
      --save 900 10
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - vertice-network

  # Vértice GitHub Bot Application - Memory Optimized
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: vertice-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Memory limits
    mem_limit: 512m
    mem_reservation: 384m
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://vertice:${POSTGRES_PASSWORD:-changeme}@postgres:5432/vertice_github_bot
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-changeme}
      GITHUB_WEBHOOK_SECRET: ${GITHUB_WEBHOOK_SECRET}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-warn}
      OTEL_ENABLED: "false"
      # Node.js memory optimization
      NODE_OPTIONS: "--max-old-space-size=384 --optimize-for-size"
    ports:
      - "3000:3000"
    volumes:
      - app-logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/health/live || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - vertice-network
    labels:
      - "com.vertice.constitutional.compliance=true"
      - "com.vertice.service=github-bot"
      - "com.vertice.deployment=oracle-cloud-1gb"

networks:
  vertice-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  app-logs:
    driver: local
